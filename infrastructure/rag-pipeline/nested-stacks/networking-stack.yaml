AWSTemplateFormatVersion: "2010-09-09"
Description: "Enhanced Networking stack for RAG Pipeline infrastructure with HA, monitoring, and security features"

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Network Configuration"
        Parameters:
          - VpcCidr
          - NumberOfAZs
          - PublicSubnetCidrs
          - PrivateSubnetCidrs
      - Label:
          default: "Environment Information"
        Parameters:
          - Environment
          - ProjectName
          - CostCenter
    ParameterLabels:
      VpcCidr:
        default: "VPC CIDR Block"
      NumberOfAZs:
        default: "Number of Availability Zones"

Parameters:
  VpcCidr:
    Type: String
    Description: CIDR block for the VPC (must be /16-/28)
    Default: "10.0.0.0/16"
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block must be in the format x.x.x.x/16-28
  
  RetentionInDays:
    Type: Number
    Description: Number of days to retain VPC Flow Logs
    Default: 14
    AllowedValues: [1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653]

  AlertEmailSecondary:
    Type: String
    Description: Secondary email address for critical alerts
    AllowedPattern: ^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$
    ConstraintDescription: Must be a valid email address
  
  NumberOfAZs:
    Type: Number
    Description: Number of Availability Zones to use
    Default: 2
    MinValue: 2
    MaxValue: 3
    
  PublicSubnetCidrs:
    Type: CommaDelimitedList
    Description: Comma-delimited list of CIDR blocks for public subnets
    Default: "10.0.0.0/24,10.0.1.0/24,10.0.2.0/24"
    
  PrivateSubnetCidrs:
    Type: CommaDelimitedList
    Description: Comma-delimited list of CIDR blocks for private subnets
    Default: "10.0.10.0/24,10.0.11.0/24,10.0.12.0/24"
    
  Environment:
    Type: String
    Description: Deployment environment
    AllowedValues:
      - dev
      - staging
      - prod
      
  ProjectName:
    Type: String
    Description: Project name for resource tagging
    Default: "RAGPipeline"
    
  CostCenter:
    Type: String
    Description: Cost center for billing
    Default: "DataEngineering"

  AlertEmail:
    Type: String
    Description: Email address for alarm notifications

Conditions:
  IsProduction: !Equals [!Ref Environment, "prod"]
  CreateThirdAZ: !Equals [!Ref NumberOfAZs, 3]

Resources:
  # VPC and Main Network Components
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-VPC-${Environment}
        - Key: Environment
          Value: !Ref Environment
        - Key: CostCenter
          Value: !Ref CostCenter
        - Key: Project
          Value: !Ref ProjectName

  # Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-IGW-${Environment}
        - Key: Environment
          Value: !Ref Environment

  GatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # Public Subnets and Route Tables
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [0, !Ref PublicSubnetCidrs]
      AvailabilityZone: !Select [0, !GetAZs ""]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-PublicSubnet1-${Environment}
        - Key: Type
          Value: Public

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [1, !Ref PublicSubnetCidrs]
      AvailabilityZone: !Select [1, !GetAZs ""]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-PublicSubnet2-${Environment}
        - Key: Type
          Value: Public

  PublicSubnet3:
    Condition: CreateThirdAZ
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [2, !Ref PublicSubnetCidrs]
      AvailabilityZone: !Select [2, !GetAZs ""]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-PublicSubnet3-${Environment}
        - Key: Type
          Value: Public

  # Private Subnets
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [0, !Ref PrivateSubnetCidrs]
      AvailabilityZone: !Select [0, !GetAZs ""]
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-PrivateSubnet1-${Environment}
        - Key: Type
          Value: Private

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [1, !Ref PrivateSubnetCidrs]
      AvailabilityZone: !Select [1, !GetAZs ""]
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-PrivateSubnet2-${Environment}
        - Key: Type
          Value: Private

  PrivateSubnet3:
    Condition: CreateThirdAZ
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [2, !Ref PrivateSubnetCidrs]
      AvailabilityZone: !Select [2, !GetAZs ""]
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-PrivateSubnet3-${Environment}
        - Key: Type
          Value: Private

  # NAT Gateways and EIPs
  NATGateway1EIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-NAT1-EIP-${Environment}

  NATGateway2EIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-NAT2-EIP-${Environment}

  NATGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NATGateway1EIP.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-NAT1-${Environment}

  NATGateway2:
    Type: AWS::EC2::NatGateway
    Condition: IsProduction
    Properties:
      AllocationId: !GetAtt NATGateway2EIP.AllocationId
      SubnetId: !Ref PublicSubnet2
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-NAT2-${Environment}

  # Route Tables
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-PublicRT-${Environment}

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-PrivateRT1-${Environment}

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Condition: IsProduction
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-PrivateRT2-${Environment}

  # Routes
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: GatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway1

  PrivateRoute2:
    Type: AWS::EC2::Route
    Condition: IsProduction
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway2

  # Route Table Associations
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet3RouteTableAssociation:
    Condition: CreateThirdAZ
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet3
      RouteTableId: !Ref PublicRouteTable

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable1

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !If [IsProduction, !Ref PrivateRouteTable2, !Ref PrivateRouteTable1]

  PrivateSubnet3RouteTableAssociation:
    Condition: CreateThirdAZ
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet3
      RouteTableId: !If [IsProduction, !Ref PrivateRouteTable2, !Ref PrivateRouteTable1]

  # Network ACLs
  PublicNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-PublicNACL-${Environment}

  PrivateNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-PrivateNACL-${Environment}

  # NACL Rules for Public Subnet
  PublicIngressHTTPRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: 100
      Protocol: 6  # TCP
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 80
        To: 80

  PublicIngressHTTPSRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: 110
      Protocol: 6  # TCP
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 443
        To: 443

  PublicIngressEphemeralRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: 120
      Protocol: 6  # TCP
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 1024
        To: 65535

  PublicEgressRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: 100
      Protocol: -1  # All traffic
      RuleAction: allow
      Egress: true
      CidrBlock: 0.0.0.0/0

  # NACL Rules for Private Subnet
  PrivateIngressVPCRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PrivateNetworkAcl
      RuleNumber: 100
      Protocol: -1  # All traffic
      RuleAction: allow
      Egress: false
      CidrBlock: !Ref VpcCidr

  PrivateEgressRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PrivateNetworkAcl
      RuleNumber: 100
      Protocol: -1  # All traffic
      RuleAction: allow
      Egress: true
      CidrBlock: 0.0.0.0/0

  # NACL Associations
  PublicSubnet1NaclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      NetworkAclId: !Ref PublicNetworkAcl

  PublicSubnet2NaclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      NetworkAclId: !Ref PublicNetworkAcl

  PublicSubnet3NaclAssociation:
    Condition: CreateThirdAZ
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PublicSubnet3
      NetworkAclId: !Ref PublicNetworkAcl

  PrivateSubnet1NaclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      NetworkAclId: !Ref PrivateNetworkAcl

  PrivateSubnet2NaclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      NetworkAclId: !Ref PrivateNetworkAcl

  PrivateSubnet3NaclAssociation:
    Condition: CreateThirdAZ
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet3
      NetworkAclId: !Ref PrivateNetworkAcl

  # S3 VPC Endpoint
  S3VPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal: "*"
            Action:
              - "s3:*"
            Resource: "*"
      RouteTableIds: !If 
        - IsProduction
        - [!Ref PrivateRouteTable1, !Ref PrivateRouteTable2]
        - [!Ref PrivateRouteTable1]
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.s3"
      VpcId: !Ref VPC

  # Additional CloudWatch Alarms
  NATGatewayErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: !Sub "Alert when ${ProjectName} NAT Gateway errors occur"
      MetricName: ErrorPortAllocation
      Namespace: AWS/NATGateway
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 2
      Threshold: 10
      ComparisonOperator: GreaterThanThreshold
      TreatMissingData: notBreaching
      AlarmActions:
        - !Ref AlertSNSTopic
      Dimensions:
        - Name: NatGatewayId
          Value: !Ref NATGateway1

  # VPC Flow Logs
  VPCFlowLogsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: vpc-flow-logs.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: flowlogs-policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                Resource: !GetAtt VPCFlowLogsGroup.Arn

  VPCFlowLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/vpc/${ProjectName}-${Environment}-flow-logs
      RetentionInDays: !If 
        - IsProduction
        - 365
        - !Ref RetentionInDays
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-FlowLogs-${Environment}
        - Key: Environment
          Value: !Ref Environment
        - Key: Compliance
          Value: !If [IsProduction, "SOC2", "Development"]

  NetworkDashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: !Sub ${ProjectName}-${Environment}-NetworkDashboard
      DashboardBody: !Sub |
        {
          "widgets": [
            {
              "type": "metric",
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  ["AWS/NATGateway", "BytesOutToDestination", "NatGatewayId", "${NATGateway1}"],
                  [".", "BytesOutToSource", ".", "."],
                  [".", "PacketsOutToDestination", ".", "."],
                  [".", "PacketsOutToSource", ".", "."]
                ],
                "period": 300,
                "region": "${AWS::Region}",
                "title": "NAT Gateway Metrics"
              }
            }
          ]
        }

  VPCFlowLog:
    Type: AWS::EC2::FlowLog
    Properties:
      ResourceId: !Ref VPC
      ResourceType: VPC
      TrafficType: ALL
      LogDestinationType: cloud-watch-logs
      LogGroupName: !Ref VPCFlowLogsGroup
      DeliverLogsPermissionArn: !GetAtt VPCFlowLogsRole.Arn

  # Monitoring
  AlertSNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: !Sub ${ProjectName}-${Environment}-Alerts
      KmsMasterKeyId: !If [IsProduction, !Ref AlertTopicKey, !Ref "AWS::NoValue"]
      Subscription:
        - Protocol: email
          Endpoint: !Ref AlertEmail
        - Protocol: email
          Endpoint: !Ref AlertEmailSecondary

  AlertTopicKey:
    Type: AWS::KMS::Key
    Condition: IsProduction
    Properties:
      Description: KMS key for SNS topic encryption
      EnableKeyRotation: true
      KeyPolicy:
        Version: "2012-10-17"
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
            Action: kms:*
            Resource: "*"
          - Sid: Allow SNS to use the key
            Effect: Allow
            Principal:
              Service: sns.amazonaws.com
            Action:
              - kms:Decrypt
              - kms:GenerateDataKey*
            Resource: "*"

  FlowLogMetricFilter:
    Type: AWS::Logs::MetricFilter
    Properties:
      LogGroupName: !Ref VPCFlowLogsGroup
      FilterPattern: "[version, account_id, interface_id, srcaddr, dstaddr, srcport, dstport, protocol, packets, bytes, start, end, action=REJECT, log_status]"
      MetricTransformations:
        - MetricValue: "1"
          MetricNamespace: !Sub "VPC/FlowLogs/${ProjectName}"
          MetricName: "RejectedConnections"
          DefaultValue: 0
          Unit: Count # Added unit

  RejectedConnectionsAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${ProjectName}-${Environment}-RejectedConnections"
      AlarmDescription: "Alert on rejected VPC connections"
      MetricName: "RejectedConnections"
      Namespace: !Sub "VPC/FlowLogs/${ProjectName}"
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 2
      Threshold: 100
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - !Ref AlertSNSTopic

  NATGatewayAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: !Sub "Alert when ${ProjectName} NAT Gateway bandwidth exceeds threshold"
      MetricName: BytesOutToDestination
      Namespace: AWS/NATGateway
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 2
      Threshold: 5000000000  # 5 GB
      ComparisonOperator: GreaterThanThreshold  # Added missing property
      AlarmActions:
        - !Ref AlertSNSTopic
      Dimensions:
        - Name: NatGatewayId
          Value: !Ref NATGateway1

Outputs:
  VpcId:
    Description: VPC ID
    Value: !Ref VPC
    Export:
      Name: !Sub ${AWS::StackName}-VpcId

  PublicSubnet1:
    Description: Public Subnet 1 ID
    Value: !Ref PublicSubnet1
    Export:
      Name: !Sub ${AWS::StackName}-PublicSubnet1

  PublicSubnet2:
    Description: Public Subnet 2 ID
    Value: !Ref PublicSubnet2
    Export:
      Name: !Sub ${AWS::StackName}-PublicSubnet2

  PublicSubnet3:
    Condition: CreateThirdAZ
    Description: Public Subnet 3 ID
    Value: !Ref PublicSubnet3
    Export:
      Name: !Sub ${AWS::StackName}-PublicSubnet3

  PrivateSubnet1:
    Description: Private Subnet 1 ID
    Value: !Ref PrivateSubnet1
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnet1

  PrivateSubnet2:
    Description: Private Subnet 2 ID
    Value: !Ref PrivateSubnet2
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnet2

  PrivateSubnet3:
    Condition: CreateThirdAZ
    Description: Private Subnet 3 ID
    Value: !Ref PrivateSubnet3
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnet3

  PublicRouteTable:
    Description: Public Route Table ID
    Value: !Ref PublicRouteTable
    Export:
      Name: !Sub ${AWS::StackName}-PublicRouteTable

  PrivateRouteTable1:
    Description: Private Route Table 1 ID
    Value: !Ref PrivateRouteTable1
    Export:
      Name: !Sub ${AWS::StackName}-PrivateRouteTable1

  PrivateRouteTable2:
    Condition: IsProduction
    Description: Private Route Table 2 ID
    Value: !Ref PrivateRouteTable2
    Export:
      Name: !Sub ${AWS::StackName}-PrivateRouteTable2

  VpcCidr:
    Description: VPC CIDR Block
    Value: !Ref VpcCidr
    Export:
      Name: !Sub ${AWS::StackName}-VpcCidr

  NumberOfAZs:
    Description: Number of Availability Zones used
    Value: !Ref NumberOfAZs
    Export:
      Name: !Sub ${AWS::StackName}-NumberOfAZs

  Environment:
    Description: Deployment Environment
    Value: !Ref Environment
    Export:
      Name: !Sub ${AWS::StackName}-Environment

  VPCFlowLogsGroup:
    Description: VPC Flow Logs CloudWatch Log Group Name
    Value: !Ref VPCFlowLogsGroup
    Export:
      Name: !Sub ${AWS::StackName}-FlowLogsGroup

  AlertSNSTopic:
    Description: SNS Topic ARN for Network Alerts
    Value: !Ref AlertSNSTopic
    Export:
      Name: !Sub ${AWS::StackName}-AlertTopic
AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31 

Description: Comprehensive RAG Stack for Hybrid Retrieval-Augmented Generation (AWS Well-Architected Framework Compliant)

Parameters:
  Environment:
    Type: String
    AllowedValues:
      - dev
      - staging
      - prod
    Description: Deployment environment
    ConstraintDescription: Must be a valid environment.

  AllowedCIDR:
    Type: String
    Default: 192.168.0.0/16
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    Description: Allowed CIDR for security group access
    ConstraintDescription: Must be a valid CIDR block.

  BackupRetentionDays:
    Type: Number
    Default: 30
    MinValue: 1
    MaxValue: 35
    Description: Retention period for backups (1-35 days)
    ConstraintDescription: Must be a number between 1 and 35.

  KmsKeyAlias:
    Type: String
    Default: "alias/default"
    Description: KMS Key Alias for encryption

  AlertEmail:
    Type: String
    Description: Email address for notifications
    AllowedPattern: '.+@.+\\..+' 
    ConstraintDescription: Must be a valid email address.

  PineconeApiKey:
    Type: String
    Description: API Key for Pinecone Vector Database
    NoEcho: true 

Conditions:
  IsProduction: !Equals [ !Sub ${Environment}, 'prod' ]

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-VPC
        - Key: Environment
          Value: !Sub ${Environment}

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select 
        - 0
        - !GetAZs 
          Ref: AWS::Region
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-PublicSubnet1
        - Key: Environment
          Value: !Sub ${Environment}

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select
        - 1
        - !GetAZs 
          Ref: AWS::Region
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-PublicSubnet2
        - Key: Environment
          Value: !Sub ${Environment}

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-InternetGateway
        - Key: Environment
          Value: !Sub ${Environment}

  IGWAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-PublicRouteTable
        - Key: Environment
          Value: !Sub ${Environment}

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: IGWAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub ${Environment}-ECSCluster
      Tags:
        - Key: Environment
          Value: !Sub ${Environment}

  SageMakerExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: sagemaker.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: SageMakerAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:*
                  - logs:*
                  - sagemaker:*
                  - neptune-db:*
                Resource: '*'
      Tags:
        - Key: Environment
          Value: !Sub ${Environment}

  GlueExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: glue.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: GlueAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:*
                  - logs:*
                  - glue:*
                  - neptune-db:*
                  - kendra:*
                  - states:*
                Resource: '*'
      Tags:
        - Key: Environment
          Value: !Sub ${Environment}

  KendraRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: kendra.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: KendraAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:ListBucket
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
      Tags:
        - Key: Environment
          Value: !Sub ${Environment}

  NeptuneCluster:
    Type: AWS::Neptune::DBCluster
    Properties:
      DBClusterIdentifier: !Sub ${Environment}-NeptuneCluster
      EngineVersion: '1.2.1' 
      BackupRetentionPeriod: !Ref BackupRetentionDays
      PreferredBackupWindow: '03:00-04:00'
      StorageEncrypted: true
      KmsKeyId: !Sub 'arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/${KmsKeyAlias}'
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-NeptuneCluster
        - Key: Environment
          Value: !Sub ${Environment}

  NeptuneInstance:
    Type: AWS::Neptune::DBInstance
    Properties:
      DBInstanceClass: !If [IsProduction, db.r5.large, db.t3.medium] 
      DBClusterIdentifier: !Ref NeptuneCluster
      AvailabilityZone: !Select 
        - 0
        - !GetAZs 
          Ref: AWS::Region
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-NeptuneInstance
        - Key: Environment
          Value: !Sub ${Environment} 

  GlueETL:
    Type: AWS::Glue::Job
    Properties:
      Name: !Sub ${Environment}-GlueETL
      Role: !GetAtt GlueExecutionRole.Arn
      Command:
        Name: glueetl
        ScriptLocation: s3://your-bucket/transform.py # Replace with your script location
      DefaultArguments:
        '--TempDir': s3://your-bucket/temp-etl/  # Replace with your bucket
      Tags:
        - Key: Environment
          Value: !Sub ${Environment}

  CloudWatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/ecs/${Environment}/${AWS::StackName}"
      RetentionInDays: 90
      Tags:
        - Key: Environment
          Value: !Sub ${Environment}

  CloudWatchAlarmGlue:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub ${Environment}-GlueETLFailureAlarm
      AlarmDescription: Glue ETL job failure detection.
      MetricName: FailedJobs
      Namespace: AWS/Glue
      Statistic: Maximum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - !Ref NotificationTopic

  CloudWatchAlarmNeptune:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub ${Environment}-NeptuneHealthAlarm
      AlarmDescription: Alarm for Neptune instance health.
      MetricName: CPUUtilization
      Namespace: AWS/Neptune
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 80
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - !Ref NotificationTopic

  CloudWatchAlarmLambda:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub ${Environment}-LambdaExecutionErrorAlarm
      AlarmDescription: Alarm for Lambda execution errors.
      MetricName: Errors
      Namespace: AWS/Lambda
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      AlarmActions:
        - !Ref NotificationTopic

  NotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub ${Environment}-AlertTopic
      Subscription:
        - Protocol: email
          Endpoint: !Ref AlertEmail
      Tags:
        - Key: Environment
          Value: !Sub ${Environment}

  GuardDutyDetector:
    Type: AWS::GuardDuty::Detector
    Properties:
      Enable: true

  SecurityHub:
    Type: AWS::SecurityHub::Hub
    Properties:
      Tags:
        - Key: Environment
          Value: !Sub ${Environment}

  BedrockService:
    Type: AWS::SageMaker::Model
    Properties:
      ExecutionRoleArn: !GetAtt SageMakerExecutionRole.Arn
      ModelName: !Sub ${Environment}-BedrockLLM
      PrimaryContainer:
        Image: "763104351884.dkr.ecr.us-east-1.amazonaws.com/pytorch-inference:1.13.1-gpu-py39"
        Mode: SingleModel
        Environment:
          SAGEMAKER_PROGRAM: 'inference.py' # Example - provide your entry point
          SAGEMAKER_SUBMIT_DIRECTORY: 's3://your-bucket/code/' # Example - provide your code location
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-BedrockService
        - Key: Environment
          Value: !Sub ${Environment}

  VectorDatabaseFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler 
      Runtime: python3.9
      CodeUri: s3://your-bucket/vector-db-function.zip  # Replace with your function code
      Policies:
        - AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonPineconeReadOnlyAccess 
      Environment:
        Variables:
          PINECONE_API_KEY: !Ref PineconeApiKey
          PINECONE_ENVIRONMENT: 'us-east1-gcp' # Replace if needed
      Tags: 
          Environment: !Sub ${Environment}
          

  VectorDatabase:
    Type: Custom::Pinecone
    Properties:
      ServiceToken: !GetAtt VectorDatabaseFunction.Arn
      Parameters:
        - Name: VectorIndex
          Value: RAG_VectorIndex
        - Dimension: 512

  QueryProcessingFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}-QueryProcessor
      Handler: app.lambda_handler
      Runtime: python3.9
      Role: !GetAtt GlueExecutionRole.Arn
      CodeUri: s3://526rnravitest/query-processing-function.zip # Replace with your function code
      Timeout: 60 
      MemorySize: 512 
      Environment:
        Variables:
          BEDROCK_MODEL_ID: 'anthropic.claude-v2' # Replace with your model
          NEPTUNE_ENDPOINT: !GetAtt NeptuneCluster.Endpoint
          NEPTUNE_PORT: !GetAtt NeptuneCluster.Port
          PINECONE_API_KEY: !Ref PineconeApiKey
          PINECONE_ENVIRONMENT: 'us-east1-gcp' # Replace if needed
      Tags:
          Environment: !Sub ${Environment}

Outputs:
  VPCId:
    Description: VPC ID
    Value: !Ref VPC

  SageMakerExecutionRoleArn:
    Description: SageMaker Execution Role ARN
    Value: !GetAtt SageMakerExecutionRole.Arn

  GlueExecutionRoleArn:
    Description: Glue Execution Role ARN
    Value: !GetAtt GlueExecutionRole.Arn

  KendraRoleArn:
    Description: Kendra Execution Role ARN
    Value: !GetAtt KendraRole.Arn

  BedrockServiceName:
    Description: SageMaker Bedrock Service Name
    Value: !Ref BedrockService 

  VectorDatabaseName:
    Description: Pinecone Vector Index Name
    Value: RAG_VectorIndex

  QueryProcessorFunctionName:
    Description: Query Processor Function Name
    Value: !Ref QueryProcessingFunction

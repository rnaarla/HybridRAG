AWSTemplateFormatVersion: "2010-09-09"
Description: "Full Hybrid RAG Infrastructure"

Parameters:
  VpcCidr:
    Type: String
    Default: "10.0.0.0/16"
    Description: CIDR block for the VPC

  PublicSubnet1Cidr:
    Type: String
    Default: "10.0.1.0/24"
    Description: CIDR block for Public Subnet 1

  PublicSubnet2Cidr:
    Type: String
    Default: "10.0.2.0/24"
    Description: CIDR block for Public Subnet 2

  ECSDesiredTaskCount:
    Type: Number
    Default: 2
    Description: Desired number of ECS tasks to run

Resources:
  # VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: HybridRAG-VPC

  # Subnets
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet1Cidr
      AvailabilityZone: !Select [0, !GetAZs ""]

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet2Cidr
      AvailabilityZone: !Select [1, !GetAZs ""]

  # Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway

  IGWAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  # ECS Cluster
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: "HybridRAG-Cluster"

  # ECS Security Group
  ECSFargateSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow ECS traffic
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8000
          ToPort: 8000
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: "-1"
          CidrIp: 0.0.0.0/0

  # ECS Task Execution Role
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ECSExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "logs:*"
                  - "ecs:*"
                  - "s3:*"
                Resource: "*"

  # ECS Task Definition
  ECSFargateTask:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: "HybridRAG-Task"
      Cpu: "256"
      Memory: "512"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      ContainerDefinitions:
        - Name: "HybridRAG-Container"
          Image: "your-container-image:latest"
          PortMappings:
            - ContainerPort: 8000
              Protocol: tcp

  # ECS Fargate Service
  ECSFargateService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref ECSFargateTask
      DesiredCount: !Ref ECSDesiredTaskCount
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets:
            - !Ref PublicSubnet1
            - !Ref PublicSubnet2
          SecurityGroups:
            - !Ref ECSFargateSecurityGroup
          AssignPublicIp: ENABLED

  # Neptune Cluster
  NeptuneDBCluster:
    Type: AWS::Neptune::DBCluster
    Properties:
      DBClusterIdentifier: "HybridRAG-Neptune"
      Engine: neptune
      BackupRetentionPeriod: 7

  NeptuneDBInstance:
    Type: AWS::Neptune::DBInstance
    Properties:
      DBInstanceClass: db.r5.large
      DBClusterIdentifier: !Ref NeptuneDBCluster

  # AWS Kendra
  KendraIndex:
    Type: AWS::Kendra::Index
    Properties:
      Edition: ENTERPRISE_EDITION
      Name: "HybridRAG-Kendra"
      RoleArn: !GetAtt KendraRole.Arn

  KendraRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: kendra.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: KendraPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "s3:*"
                Resource: "*"

  # Lambda for Query Processing
  QueryProcessingLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: "app.lambda_handler"
      Runtime: python3.9
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import json
          def lambda_handler(event, context):
              return {"statusCode": 200, "body": json.dumps("Hello, World!")}

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "logs:*"
                  - "neptune-db:*"
                  - "kendra:*"
                Resource: "*"

Outputs:
  VPCId:
    Description: VPC ID
    Value: !Ref VPC

  ECSClusterName:
    Description: ECS Cluster Name
    Value: !Ref ECSCluster

  ECSServiceArn:
    Description: ARN of the ECS Service
    Value: !GetAtt ECSFargateService.Arn

  KendraIndexId:
    Description: Kendra Index ID
    Value: !Ref KendraIndex

  NeptuneEndpoint:
    Description: Neptune Cluster Endpoint
    Value: !GetAtt NeptuneDBCluster.Endpoint

  LambdaFunctionArn:
    Description: ARN of the Lambda Function
    Value: !GetAtt QueryProcessingLambda.Arn
